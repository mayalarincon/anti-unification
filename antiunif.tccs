%% TCCs associated with theory antiunif
%% This file was automatically generated by PVS, please **do not modify** by hand.
antiunif_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 18) for  s
	    % expected type  (cons?[AUEquation])
	  % untried
	vars_tcc1: OBLIGATION
	FORALL (s: Set_eq): NOT null?(s) IMPLIES cons?[AUEquation](s)
	
	% Termination TCC generated (at line 37, column 24) for  vars(cdr(s))
	  % untried
	vars_tcc2: OBLIGATION
	FORALL (s: Set_eq): NOT null?(s) IMPLIES <<[AUEquation](cdr[AUEquation](s), s)
	
	% Subtype TCC generated (at line 41, column 21) for  ∅
	    % expected type  finite_set[variable]
	  % untried
	labels_tcc1: OBLIGATION
	FORALL (s: Set_eq): null?(s) IMPLIES is_finite[variable](∅[variable])
	
	% Termination TCC generated (at line 83, column 21) for
	    % merge(cdr(Eqs), Sub)
	  % untried
	merge_tcc1: OBLIGATION
	FORALL (Eqs: Set_eq): NOT null?(Eqs) IMPLIES FORALL (m_subs: basic_sub): m_subs = merge_subs(car(Eqs), cdr(Eqs)) AND variable(m_subs`1) = m_subs`2 IMPLIES length[AUEquation](cdr[AUEquation](Eqs)) < length[AUEquation](Eqs)
	
	% Termination TCC generated (at line 85, column 10) for
	    % merge(cdr(Eqs), cons(m_subs, Sub))
	  % untried
	merge_tcc2: OBLIGATION
	FORALL (Eqs: Set_eq): NOT null?(Eqs) IMPLIES FORALL (m_subs: basic_sub): m_subs = merge_subs(car(Eqs), cdr(Eqs)) AND NOT variable(m_subs`1) = m_subs`2 IMPLIES length[AUEquation](cdr[AUEquation](Eqs)) < length[AUEquation](Eqs)
	
	% Subtype TCC generated (at line 111, column 18) for  c`unsolved
	    % expected type  (cons?[AUEquation])
	  % untried
	decomposefuns_tcc1: OBLIGATION
	FORALL (c: (matchingFuns?)): cons?[AUEquation](c`unsolved)
	
	% Subtype TCC generated (at line 116, column 59) for  rhs
	    % expected type  (app?)
	  % untried
	decomposefuns_tcc2: OBLIGATION
	FORALL (c: (matchingFuns?), eq: AUEquation, lhs: Term, rhs: Term, lbl: variable):      (eq = car(c`unsolved)) AND (lhs = eq`lhs) AND (rhs = eq`rhs) AND (lbl = freshLabel(c)) AND app?(lhs) IMPLIES app?[constant, variable, f_symbol, ac_symbol](rhs)
	
	% Subtype TCC generated (at line 117, column 25) for  lhs
	    % expected type  (ac_app?)
	  % untried
	decomposefuns_tcc3: OBLIGATION
	FORALL (c: (matchingFuns?), eq: AUEquation, lhs: Term, rhs: Term, lbl: variable):      (eq = car(c`unsolved)) AND (lhs = eq`lhs) AND (rhs = eq`rhs) AND (lbl = freshLabel(c)) AND NOT app?(lhs) IMPLIES ac_app?[constant, variable, f_symbol, ac_symbol](lhs)
	
	% Subtype TCC generated (at line 117, column 37) for  rhs
	    % expected type  (ac_app?)
	  % untried
	decomposefuns_tcc4: OBLIGATION
	FORALL (c: (matchingFuns?), eq: AUEquation, lhs: Term, rhs: Term, lbl: variable):      (eq = car(c`unsolved)) AND (lhs = eq`lhs) AND (rhs = eq`rhs) AND (lbl = freshLabel(c)) AND NOT app?(lhs) IMPLIES ac_app?[constant, variable, f_symbol, ac_symbol](rhs)
	
	% Judgement subtype TCC generated (at line 125, column 31) for
	    % decomposeFuns(c)
	    % expected type  {c2: Configuration |
	                   %    lex2(size(c2`unsolved), size(c2`solved)) <
	                   %     lex2(size(c`unsolved), size(c`solved))}
	  % untried
	decomposefuns_dec: OBLIGATION
	FORALL (c: (matchingFuns?)): lex2(size(decomposeFuns(c)`unsolved), size(decomposeFuns(c)`solved)) < lex2(size(c`unsolved), size(c`solved))
	
	% Subtype TCC generated (at line 155, column 17) for  c`unsolved
	    % expected type  (cons?[AUEquation])
	  % untried
	decomposepairs_tcc1: OBLIGATION
	FORALL (c: (matchingPairs?)): cons?[AUEquation](c`unsolved)
	
	% Subtype TCC generated (at line 158, column 47) for  lhs
	    % expected type  (pair?)
	  % untried
	decomposepairs_tcc2: OBLIGATION
	FORALL (c: (matchingPairs?), eq: AUEquation, lhs: Term, rhs: Term, lbl1: variable, lbl2: variable):      (eq = car(c`unsolved)) AND (lhs = eq`lhs) AND (rhs = eq`rhs) AND (lbl1 = freshLabel(c)) AND (lbl2 = freshLabel(c)) IMPLIES pair?[constant, variable, f_symbol, ac_symbol](lhs)
	
	% Subtype TCC generated (at line 158, column 58) for  rhs
	    % expected type  (pair?)
	  % untried
	decomposepairs_tcc3: OBLIGATION
	FORALL (c: (matchingPairs?), eq: AUEquation, lhs: Term, rhs: Term, lbl1: variable, lbl2: variable):      (eq = car(c`unsolved)) AND (lhs = eq`lhs) AND (rhs = eq`rhs) AND (lbl1 = freshLabel(c)) AND (lbl2 = freshLabel(c)) IMPLIES pair?[constant, variable, f_symbol, ac_symbol](rhs)
	
	% Judgement subtype TCC generated (at line 163, column 32) for
	    % decomposePairs(c)
	    % expected type  {c2: Configuration |
	                   %    lex2(size(c2`unsolved), size(c2`solved)) <
	                   %     lex2(size(c`unsolved), size(c`solved))}
	  % untried
	decomposepairs_dec: OBLIGATION
	FORALL (c: (matchingPairs?)): lex2(size(decomposePairs(c)`unsolved), size(decomposePairs(c)`solved)) < lex2(size(c`unsolved), size(c`solved))
	
	% Subtype TCC generated (at line 176, column 19) for  c`unsolved
	    % expected type  (cons?[AUEquation])
	  % untried
	trivialsyn_eqs_tcc1: OBLIGATION
	FORALL (c: (syntacticallyEq?)): cons?[AUEquation](c`unsolved)
	
	% Judgement subtype TCC generated (at line 180, column 32) for
	    % trivialSyn_Eqs(c)
	    % expected type  {c2: Configuration |
	                   %    lex2(size(c2`unsolved), size(c2`solved)) <
	                   %     lex2(size(c`unsolved), size(c`solved))}
	  % untried
	trivialsyn_eqs_dec: OBLIGATION
	FORALL (c: (syntacticallyEq?)): lex2(size(trivialSyn_Eqs(c)`unsolved), size(trivialSyn_Eqs(c)`solved)) < lex2(size(c`unsolved), size(c`solved))
	
	% Subtype TCC generated (at line 195, column 31) for  c`unsolved
	    % expected type  (cons?[AUEquation])
	  % untried
	solve_tcc1: OBLIGATION
	FORALL (c: (applySol?)): cons?[AUEquation](c`unsolved)
	
	% Judgement subtype TCC generated (at line 197, column 23) for  solve(c)
	    % expected type  {c2: Configuration |
	                   %    lex2(size(c2`unsolved), size(c2`solved)) <
	                   %     lex2(size(c`unsolved), size(c`solved))}
	  % untried
	solve_dec: OBLIGATION
	FORALL (c: (applySol?)): lex2(size(solve(c)`unsolved), size(solve(c)`solved)) < lex2(size(c`unsolved), size(c`solved))
	
	% Subtype TCC generated (at line 218, column 22) for  c
	    % expected type  (applySol?)
	  % untried
	antiunify_tcc1: OBLIGATION
	FORALL (c: Configuration): NOT null?(c`unsolved) AND NOT matchingFuns?(c) AND NOT matchingPairs?(c) AND NOT syntacticallyEq?(c) IMPLIES applySol?(c)
	
	% Judgement subtype TCC generated (at line 222, column 31) for  antiunify(c)
	    % expected type  (validConfiguration?)
	  % untried
	antiunification_j: OBLIGATION
	FORALL (c: (validConfiguration?)): validConfiguration?(antiunify(c))

END antiunif_TCCS
