% Subtype TCC generated (at line 32, column 4) for
    % vars(eq`lhs) ∪ vars(eq`rhs)
    % expected type  finite_set[variable]
  % proved - incomplete
vars_TCC1: OBLIGATION
  FORALL (eq: AUT):
    is_finite[variable](∪[variable](vars(eq`lhs), vars(eq`rhs)));

% Subtype TCC generated (at line 67, column 21) for  ∅
    % expected type  finite_set[variable]
  % proved - complete
vars_TCC2: OBLIGATION
  FORALL (s: List_AUT): null?(s) IMPLIES is_finite[variable](∅[variable]);

% Subtype TCC generated (at line 68, column 18) for  s
    % expected type  (cons?[AUT])
  % proved - complete
vars_TCC3: OBLIGATION
  FORALL (s: List_AUT): NOT null?(s) IMPLIES cons?[AUT](s);

% Termination TCC generated (at line 68, column 24) for  vars(cdr(s))
  % proved - complete
vars_TCC4: OBLIGATION
  FORALL (s: List_AUT): NOT null?(s) IMPLIES <<[AUT](cdr[AUT](s), s);

% Subtype TCC generated (at line 68, column 9) for
    % vars(car(s)) ∪ vars(cdr(s))
    % expected type  finite_set[variable]
  % proved - incomplete
vars_TCC5: OBLIGATION
  FORALL (s: List_AUT,
          v: [{z: List_AUT | <<[AUT](z, s)} -> finite_set[variable]]):
    NOT null?(s) IMPLIES
     is_finite[variable](∪[variable](vars(car[AUT](s)), v(cdr[AUT](s))));

% The SUBTYPE TCC (at line 68, column 33) for
 % term generated from vars  s
    % expected type  (cons?[AUT])
  % is subsumed by vars_TCC3

% The SUBTYPE TCC (at line 79, column 21) for
 % term generated from labels  ∅
    % expected type  finite_set[variable]
  % is subsumed by vars_TCC2

% The SUBTYPE TCC (at line 80, column 17) for
 % term generated from labels  s
    % expected type  (cons?[AUT])
  % is subsumed by vars_TCC3

% The SUBTYPE TCC (at line 80, column 38) for
 % term generated from labels  s
    % expected type  (cons?[AUT])
  % is subsumed by vars_TCC3

% The TERMINATION TCC (at line 80, column 27) for
 % term generated from labels  labels(cdr(s))
  % is subsumed by vars_TCC4

% Termination TCC generated (at line 144, column 33) for
    % AUT_repeated_in?(eq, cdr(s))
  % proved - complete
AUT_repeated_in?_TCC1: OBLIGATION
  FORALL (eq: AUT, s: List_AUT):
    cons?(s) AND NOT repeated_AUT?(eq, car(s)) IMPLIES <<[AUT](cdr[AUT](s), s);

% Subtype TCC generated (at line 155, column 33) for  cdr(s)
    % expected type  (cons?[AUT])
  % proved - complete
rep_AUT_in_TCC1: OBLIGATION
  FORALL (s: (first_AUT_repeated?)): cons?[AUT](cdr[AUT](s));

% Subtype TCC generated (at line 157, column 20) for
    % cons(car(s), cdr(cdr(s)))
    % expected type  (first_AUT_repeated?)
  % proved - complete
rep_AUT_in_TCC2: OBLIGATION
  FORALL (s: (first_AUT_repeated?)):
    NOT repeated_AUT?(car(s), car(cdr(s))) IMPLIES
     first_AUT_repeated?(cons[AUT](car[AUT](s), cdr[AUT](cdr[AUT](s))));

% Termination TCC generated (at line 157, column 9) for
    % rep_AUT_in(cons(car(s), cdr(cdr(s))))
  % proved - complete
rep_AUT_in_TCC3: OBLIGATION
  FORALL (s: (first_AUT_repeated?)):
    NOT repeated_AUT?(car(s), car(cdr(s))) IMPLIES
     length[AUT](cons[AUT](car[AUT](s), cdr[AUT](cdr[AUT](s)))) <
      length[AUT](s);

% The SUBTYPE TCC (at line 156, column 13) for
 % term generated from rep_AUT_in  cdr(s)
    % expected type  (cons?[AUT])
  % is subsumed by rep_AUT_in_TCC1

% The SUBTYPE TCC (at line 157, column 37) for
 % term generated from rep_AUT_in  cdr(s)
    % expected type  (cons?[AUT])
  % is subsumed by rep_AUT_in_TCC1

% Subtype TCC generated (at line 170, column 52) for  s
    % expected type  (cons?[AUT])
  % proved - complete
nonrepeated?_TCC1: OBLIGATION
  FORALL (s: List_AUT):
    NOT length(s) <= 1 AND NOT first_AUT_repeated?(s) IMPLIES cons?[AUT](s);

% Termination TCC generated (at line 170, column 35) for
    % nonrepeated?(cdr(s))
  % proved - complete
nonrepeated?_TCC2: OBLIGATION
  FORALL (s: List_AUT):
    NOT length(s) <= 1 AND NOT first_AUT_repeated?(s) IMPLIES
     <<[AUT](cdr[AUT](s), s);

% The SUBTYPE TCC (at line 174, column 31) for
 % term generated from allSolvedAUTs?  s
    % expected type  (cons?[AUT])
  % is subsumed by vars_TCC3

% The SUBTYPE TCC (at line 174, column 56) for
 % term generated from allSolvedAUTs?  s
    % expected type  (cons?[AUT])
  % is subsumed by vars_TCC3

% The TERMINATION TCC (at line 174, column 37) for
 % term generated from allSolvedAUTs?
    %  allSolvedAUTs?(cdr(s))
  % is subsumed by vars_TCC4

% Subtype TCC generated (at line 191, column 72) for  c`unsolved
    % expected type  (cons?[AUT])
  % proved - incomplete
validity_car_conf_unsolved_TCC1: OBLIGATION
  FORALL (c: (validConfiguration?) | cons?[AUT](c`unsolved)):
    cons?[AUT](c`unsolved);

% The SUBTYPE TCC (at line 194, column 84) for
 % term generated from validity_cdr_conf_unsolved  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 212, column 52) for
 % term generated from cdr_is_validConf  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% Subtype TCC generated (at line 243, column 61) for  i
    % expected type  below[length[AUT](append(c`unsolved, c`solved))]
  % proved - incomplete
freshness_nth_label_TCC1: OBLIGATION
  FORALL (c: (validConfiguration?),
          i: below[length[AUT](c`unsolved) + length[AUT](c`solved)]):
    i < length[AUT](append[AUT](c`unsolved, c`solved));

% The SUBTYPE TCC (at line 246, column 37) for
 % term generated from freshness_car_label  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 261, column 36) for
 % term generated from car_lbl_fresh_in_cdr  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 261, column 68) for
 % term generated from car_lbl_fresh_in_cdr  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 264, column 36) for
 % term generated from car_lbl_fresh_dom  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 269, column 47) for
 % term generated from emptyness_conf_vars_with_lbls_and_fresh_variables  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 274, column 85) for
 % term generated from emptyness_conf_supdom_with_lbls_and_fresh_variables  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 278, column 17) for
 % term generated from emptyness_conf_supdom_with_car_lbls_and_fresh_variables  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 280, column 113) for
 % term generated from emptyness_conf_supdom_with_car_lbls_and_fresh_variables  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 284, column 89) for
 % term generated from emptyness_conf_var_with_lbls_DecF  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 290, column 41) for
 % term generated from emptyness_conf_var_with_lbls_DecP  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 293, column 81) for
 % term generated from emptyness_conf_var  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% The SUBTYPE TCC (at line 297, column 17) for
 % term generated from niceness_preserv_conditions  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by validity_car_conf_unsolved_TCC1

% Subtype TCC generated (at line 310, column 17) for  c`unsolved
    % expected type  (cons?[AUT])
  % proved - incomplete
niceness_preserv_conditions_DecF_TCC1: OBLIGATION
  FORALL (c: (match_DecF_conf?)): cons?[AUT](c`unsolved);

% The SUBTYPE TCC (at line 318, column 18) for
 % term generated from nice_sub_DecF  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% Subtype TCC generated (at line 327, column 61) for  lhs
    % expected type  (app?)
  % proved - incomplete
uns_solv_vars_match_DecF_conf_TCC1: OBLIGATION
  FORALL (c: (match_DecF_conf?), eq: AUT, lhs: Term, rhs: Term):
    eq = car(c`unsolved) AND lhs = eq`lhs AND rhs = eq`rhs IMPLIES
     app?[constant, variable, f_symbol](lhs);

% Subtype TCC generated (at line 327, column 83) for  rhs
    % expected type  (app?)
  % proved - incomplete
uns_solv_vars_match_DecF_conf_TCC2: OBLIGATION
  FORALL (c: (match_DecF_conf?), eq: AUT, lhs: Term, rhs: Term):
    eq = car(c`unsolved) AND lhs = eq`lhs AND rhs = eq`rhs IMPLIES
     app?[constant, variable, f_symbol](rhs);

% The SUBTYPE TCC (at line 324, column 22) for
 % term generated from uns_solv_vars_match_DecF_conf  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% The SUBTYPE TCC (at line 328, column 30) for
 % term generated from uns_solv_vars_match_DecF_conf  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% Subtype TCC generated (at line 341, column 32) for
    % cons((eq`label, app(sym(eq`lhs), variable(lbl))), c`substitution)
    % expected type  (nice?)
  % proved - incomplete
DecF_TCC1: OBLIGATION
  FORALL (c: (match_DecF_conf?), eq: AUT, lhs: Term, rhs: Term, lbl: variable):
    eq = car(c`unsolved) AND
     lhs = eq`lhs AND rhs = eq`rhs AND lbl = freshLabel(c)
     IMPLIES
     nice?(cons[[variable, first_order_term[constant, variable, f_symbol]]]
               ((eq`label,
                 app[constant, variable, f_symbol]
                     (sym(eq`lhs),
                      variable[constant, variable, f_symbol](lbl))),
                c`substitution));

% Subtype TCC generated (at line 340, column 7) for
    % c
    %   WITH [unsolved
    %           := cons(makeAUT(arg(lhs), arg(rhs), lbl), cdr(c`unsolved)),
    %         substitution
    %           := cons((eq`label, app(sym(eq`lhs), variable(lbl))),
    %                   c`substitution)]
    % expected type  {cp: (validConfiguration?) |
                   %    cons?(cp`unsolved) AND
                   %     cdr(c`unsolved) = cdr(cp`unsolved) AND
                   %      subs(cp`substitution)
                   %          (variable(car(c`unsolved)`label))
                   %       =
                   %       app(sym((car(c`unsolved))`lhs),
                   %           variable(car(cp`unsolved)`label))
                   %       AND size(cp`unsolved) < size(c`unsolved)}
  % proved - incomplete
DecF_TCC2: OBLIGATION
  FORALL (c: (match_DecF_conf?), eq: AUT, lhs: Term, rhs: Term, lbl: variable):
    eq = car(c`unsolved) AND
     lhs = eq`lhs AND rhs = eq`rhs AND lbl = freshLabel(c)
     IMPLIES
     validConfiguration?((c
                            WITH [unsolved
                                    := cons[AUT]
                                           (makeAUT(arg[constant, variable,
                                                        f_symbol]
                                                        (lhs),
                                                    arg[constant, variable,
                                                        f_symbol]
                                                        (rhs),
                                                    lbl),
                                            cdr[AUT](c`unsolved)),
                                  substitution
                                    := cons[[variable,
                                             first_order_term
                                                 [constant, variable,
                                                  f_symbol]]]
                                           ((eq`label,
                                             app[constant, variable, f_symbol]
                                                 (sym(eq`lhs),
                                                  variable
                                                      [constant, variable,
                                                       f_symbol]
                                                      (lbl))),
                                            c`substitution)]))
      AND
      subs(cons[[variable, first_order_term[constant, variable, f_symbol]]]
               ((eq`label,
                 app[constant, variable, f_symbol]
                     (sym(eq`lhs),
                      variable[constant, variable, f_symbol](lbl))),
                c`substitution))
          (variable[constant, variable, f_symbol](car[AUT](c`unsolved)`label))
       =
       app[constant, variable, f_symbol]
           (sym((car[AUT](c`unsolved))`lhs),
            variable[constant, variable, f_symbol]
                (makeAUT(arg[constant, variable, f_symbol](lhs),
                         arg[constant, variable, f_symbol](rhs), lbl)`label))
       AND
       size(cons[AUT]
                (makeAUT(arg[constant, variable, f_symbol](lhs),
                         arg[constant, variable, f_symbol](rhs), lbl),
                 cdr[AUT](c`unsolved)))
        < size(c`unsolved);

% The SUBTYPE TCC (at line 331, column 48) for
 % term generated from DecF  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% The SUBTYPE TCC (at line 332, column 79) for
 % term generated from DecF  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% The SUBTYPE TCC (at line 333, column 48) for
 % term generated from DecF  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% The SUBTYPE TCC (at line 336, column 18) for
 % term generated from DecF  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% The SUBTYPE TCC (at line 340, column 47) for
 % term generated from DecF  lhs
    % expected type  (app?)
  % is subsumed by uns_solv_vars_match_DecF_conf_TCC1

% The SUBTYPE TCC (at line 340, column 56) for
 % term generated from DecF  rhs
    % expected type  (app?)
  % is subsumed by uns_solv_vars_match_DecF_conf_TCC2

% The SUBTYPE TCC (at line 340, column 71) for
 % term generated from DecF  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecF_TCC1

% Subtype TCC generated (at line 351, column 18) for  c`unsolved
    % expected type  (cons?[AUT])
  % proved - incomplete
niceness_preserv_conditions_DecP_TCC1: OBLIGATION
  FORALL (c: (match_DecP_conf?)): cons?[AUT](c`unsolved);

% The SUBTYPE TCC (at line 361, column 20) for
 % term generated from nice_sub_DecP  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecP_TCC1

% Subtype TCC generated (at line 372, column 64) for  lhs
    % expected type  (pair?)
  % proved - incomplete
uns_solv_vars_match_DecP_conf_TCC1: OBLIGATION
  FORALL (c: (match_DecP_conf?), eq: AUT, lhs: Term, rhs: Term):
    eq = car(c`unsolved) AND lhs = eq`lhs AND rhs = eq`rhs IMPLIES
     pair?[constant, variable, f_symbol](lhs);

% Subtype TCC generated (at line 372, column 88) for  rhs
    % expected type  (pair?)
  % proved - incomplete
uns_solv_vars_match_DecP_conf_TCC2: OBLIGATION
  FORALL (c: (match_DecP_conf?), eq: AUT, lhs: Term, rhs: Term):
    eq = car(c`unsolved) AND lhs = eq`lhs AND rhs = eq`rhs IMPLIES
     pair?[constant, variable, f_symbol](rhs);

% The SUBTYPE TCC (at line 369, column 23) for
 % term generated from uns_solv_vars_match_DecP_conf  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecP_TCC1

% The SUBTYPE TCC (at line 373, column 33) for
 % term generated from uns_solv_vars_match_DecP_conf  lhs
    % expected type  (pair?)
  % is subsumed by uns_solv_vars_match_DecP_conf_TCC1

% The SUBTYPE TCC (at line 373, column 57) for
 % term generated from uns_solv_vars_match_DecP_conf  rhs
    % expected type  (pair?)
  % is subsumed by uns_solv_vars_match_DecP_conf_TCC2

% The SUBTYPE TCC (at line 374, column 32) for
 % term generated from uns_solv_vars_match_DecP_conf  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecP_TCC1

% Subtype TCC generated (at line 388, column 32) for
    % cons((eq`label, pair(variable(lbl1), variable(lbl2))), c`substitution)
    % expected type  (nice?)
  % proved - incomplete
DecP_TCC1: OBLIGATION
  FORALL (c: (match_DecP_conf?), eq: AUT, lhs: Term, rhs: Term, lbl1: variable,
          lbl2: variable):
         (eq = car(c`unsolved)) AND (lhs = eq`lhs) AND (rhs = eq`rhs)
     AND (lbl1 = freshLabel(c))
     AND (lbl2 = freshLabel(union(vars(c), singleton(lbl1))))
     IMPLIES
     nice?(cons[[variable, first_order_term[constant, variable, f_symbol]]]
               ((eq`label,
                 pair[constant, variable, f_symbol]
                     (variable[constant, variable, f_symbol](lbl1),
                      variable[constant, variable, f_symbol](lbl2))),
                c`substitution));

% Subtype TCC generated (at line 386, column 7) for
    % c
    %   WITH [unsolved
    %           := cons(makeAUT(term1(lhs), term1(rhs), lbl1),
    %                   cons(makeAUT(term2(lhs), term2(rhs), lbl2),
    %                        cdr(c`unsolved))),
    %         substitution
    %           := cons((eq`label, pair(variable(lbl1), variable(lbl2))),
    %                   c`substitution)]
    % expected type  {cp: (validConfiguration?) |
                   %         cons?(cp`unsolved) AND cons?(cdr(cp`unsolved))
                   %     AND (cdr(cdr(cp`unsolved)) = cdr(c`unsolved))
                   %     AND (subs(cp`substitution)
                   %              (variable(car(c`unsolved)`label))
                   %           =
                   %           pair(variable(car(cp`unsolved)`label),
                   %                variable(car(cdr(cp`unsolved))`label)))
                   %     AND (size(cp`unsolved) < size(c`unsolved))}
  % proved - incomplete
DecP_TCC2: OBLIGATION
  FORALL (c: (match_DecP_conf?), eq: AUT, lhs: Term, rhs: Term, lbl1: variable,
          lbl2: variable):
         (eq = car(c`unsolved)) AND (lhs = eq`lhs) AND (rhs = eq`rhs)
     AND (lbl1 = freshLabel(c))
     AND (lbl2 = freshLabel(union(vars(c), singleton(lbl1))))
     IMPLIES
     validConfiguration?((c
                            WITH [unsolved
                                    := cons[AUT]
                                           (makeAUT(term1[constant, variable,
                                                          f_symbol]
                                                        (lhs),
                                                    term1[constant, variable,
                                                          f_symbol]
                                                        (rhs),
                                                    lbl1),
                                            cons[AUT]
                                                (makeAUT(term2[constant,
                                                               variable,
                                                               f_symbol]
                                                             (lhs),
                                                         term2[constant,
                                                               variable,
                                                               f_symbol]
                                                             (rhs),
                                                         lbl2),
                                                 cdr[AUT](c`unsolved))),
                                  substitution
                                    := cons[[variable,
                                             first_order_term
                                                 [constant, variable,
                                                  f_symbol]]]
                                           ((eq`label,
                                             pair[constant, variable, f_symbol]
                                                 (variable
                                                      [constant, variable,
                                                       f_symbol]
                                                      (lbl1),
                                                  variable
                                                      [constant, variable,
                                                       f_symbol]
                                                      (lbl2))),
                                            c`substitution)]))
      AND
      subs(cons[[variable, first_order_term[constant, variable, f_symbol]]]
               ((eq`label,
                 pair[constant, variable, f_symbol]
                     (variable[constant, variable, f_symbol](lbl1),
                      variable[constant, variable, f_symbol](lbl2))),
                c`substitution))
          (variable[constant, variable, f_symbol](car[AUT](c`unsolved)`label))
       =
       pair[constant, variable, f_symbol]
           (variable[constant, variable, f_symbol]
                (makeAUT(term1[constant, variable, f_symbol](lhs),
                         term1[constant, variable, f_symbol](rhs),
                         lbl1)`label),
            variable[constant, variable, f_symbol]
                (makeAUT(term2[constant, variable, f_symbol](lhs),
                         term2[constant, variable, f_symbol](rhs),
                         lbl2)`label))
       AND
       size(cons[AUT]
                (makeAUT(term1[constant, variable, f_symbol](lhs),
                         term1[constant, variable, f_symbol](rhs), lbl1),
                 cons[AUT]
                     (makeAUT(term2[constant, variable, f_symbol](lhs),
                              term2[constant, variable, f_symbol](rhs), lbl2),
                      cdr[AUT](c`unsolved))))
        < size(c`unsolved);

% The SUBTYPE TCC (at line 378, column 100) for
 % term generated from DecP  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecP_TCC1

% The SUBTYPE TCC (at line 379, column 79) for
 % term generated from DecP  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecP_TCC1

% The SUBTYPE TCC (at line 383, column 17) for
 % term generated from DecP  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecP_TCC1

% The SUBTYPE TCC (at line 386, column 48) for
 % term generated from DecP  lhs
    % expected type  (pair?)
  % is subsumed by uns_solv_vars_match_DecP_conf_TCC1

% The SUBTYPE TCC (at line 386, column 59) for
 % term generated from DecP  rhs
    % expected type  (pair?)
  % is subsumed by uns_solv_vars_match_DecP_conf_TCC2

% The SUBTYPE TCC (at line 387, column 53) for
 % term generated from DecP  lhs
    % expected type  (pair?)
  % is subsumed by uns_solv_vars_match_DecP_conf_TCC1

% The SUBTYPE TCC (at line 387, column 64) for
 % term generated from DecP  rhs
    % expected type  (pair?)
  % is subsumed by uns_solv_vars_match_DecP_conf_TCC2

% The SUBTYPE TCC (at line 387, column 80) for
 % term generated from DecP  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by niceness_preserv_conditions_DecP_TCC1

% Subtype TCC generated (at line 399, column 17) for  c`unsolved
    % expected type  (cons?[AUT])
  % proved - incomplete
nice_sub_Synt_TCC1: OBLIGATION
  FORALL (c: (match_Synt_conf?)): cons?[AUT](c`unsolved);

% Subtype TCC generated (at line 408, column 33) for
    % cons((eq`label, lhs), c`substitution)
    % expected type  (nice?)
  % proved - incomplete
Synt_TCC1: OBLIGATION
  FORALL (c: (match_Synt_conf?), eq: AUT, lhs: Term):
    eq = car(c`unsolved) AND lhs = eq`lhs IMPLIES
     nice?(cons[[variable, Term]]((eq`label, lhs), c`substitution));

% Subtype TCC generated (at line 407, column 10) for
    % c
    %   WITH [unsolved := cdr(c`unsolved),
    %         substitution := cons((eq`label, lhs), c`substitution)]
    % expected type  {cp: (validConfiguration?) |
                   %    subs(cp`substitution)
                   %        (variable(car(c`unsolved)`label))
                   %     = car(c`unsolved)`lhs
                   %     AND size(cp`unsolved) < size(c`unsolved)}
  % proved - incomplete
Synt_TCC2: OBLIGATION
  FORALL (c: (match_Synt_conf?), eq: AUT, lhs: Term):
    eq = car(c`unsolved) AND lhs = eq`lhs IMPLIES
     validConfiguration?((c
                            WITH [unsolved := cdr[AUT](c`unsolved),
                                  substitution
                                    := cons[[variable, Term]]
                                           ((eq`label, lhs), c`substitution)]))
      AND
      subs(cons[[variable, Term]]((eq`label, lhs), c`substitution))
          (variable[constant, variable, f_symbol](car[AUT](c`unsolved)`label))
       = car[AUT](c`unsolved)`lhs
       AND size(cdr[AUT](c`unsolved)) < size(c`unsolved);

% The SUBTYPE TCC (at line 403, column 53) for
 % term generated from Synt  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Synt_TCC1

% The SUBTYPE TCC (at line 404, column 17) for
 % term generated from Synt  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Synt_TCC1

% The SUBTYPE TCC (at line 406, column 19) for
 % term generated from Synt  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Synt_TCC1

% The SUBTYPE TCC (at line 407, column 34) for
 % term generated from Synt  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Synt_TCC1

% The SUBTYPE TCC (at line 412, column 35) for
 % term generated from syntAUT_inter_vars_unsolv_labels_solv  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Synt_TCC1

% The SUBTYPE TCC (at line 420, column 17) for
 % term generated from syntAUT_car_lhs_member_img  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Synt_TCC1

% The SUBTYPE TCC (at line 424, column 17) for
 % term generated from domain_Synt  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Synt_TCC1

% Subtype TCC generated (at line 436, column 26) for  c`unsolved
    % expected type  (cons?[AUT])
  % proved - incomplete
nice_sub_Solved_AUT_TCC1: OBLIGATION
  FORALL (c: (match_Sol_conf?)): cons?[AUT](c`unsolved);

% Subtype TCC generated (at line 437, column 60) for
    % cons(sol_AUT, c`solved)
    % expected type  (first_AUT_repeated?)
  % proved - incomplete
nice_sub_Solved_AUT_TCC2: OBLIGATION
  FORALL (c: (match_Sol_conf?)):
    AUT_repeated_in?(car(c`unsolved), c`solved) IMPLIES
     FORALL (sol_AUT: AUT):
       sol_AUT = car(c`unsolved) IMPLIES
        first_AUT_repeated?(cons[AUT](sol_AUT, c`solved));

% The SUBTYPE TCC (at line 437, column 25) for
 % term generated from nice_sub_Solved_AUT  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Solved_AUT_TCC1

% Subtype TCC generated (at line 444, column 25) for
    % cons((sol_AUT`label, variable(rep_AUT`label)), c`substitution)
    % expected type  (nice?)
  % proved - incomplete
Solve_TCC1: OBLIGATION
  FORALL (c: (match_Sol_conf?)):
    AUT_repeated_in?(car(c`unsolved), c`solved) IMPLIES
     FORALL (sol_AUT: AUT, rep_AUT: AUT):
       sol_AUT = car(c`unsolved) AND
        rep_AUT = rep_AUT_in(cons(sol_AUT, c`solved))
        IMPLIES
        nice?(cons[[variable, first_order_term[constant, variable, f_symbol]]]
                  ((sol_AUT`label,
                    variable[constant, variable, f_symbol](rep_AUT`label)),
                   c`substitution));

% Subtype TCC generated (at line 443, column 9) for
    % c
    %   WITH [unsolved := cdr(c`unsolved),
    %         substitution
    %           := cons((sol_AUT`label, variable(rep_AUT`label)),
    %                   c`substitution)]
    % expected type  {cp: (validConfiguration?) |
                   %    size(cp`unsolved) < size(c`unsolved)}
  % proved - incomplete
Solve_TCC2: OBLIGATION
  FORALL (c: (match_Sol_conf?)):
    AUT_repeated_in?(car(c`unsolved), c`solved) IMPLIES
     FORALL (sol_AUT: AUT, rep_AUT: AUT):
       sol_AUT = car(c`unsolved) AND
        rep_AUT = rep_AUT_in(cons(sol_AUT, c`solved))
        IMPLIES
        validConfiguration?((c
                               WITH [unsolved := cdr[AUT](c`unsolved),
                                     substitution
                                       := cons[[variable,
                                                first_order_term
                                                    [constant, variable,
                                                     f_symbol]]]
                                              ((sol_AUT`label,
                                                variable
                                                    [constant, variable,
                                                     f_symbol]
                                                    (rep_AUT`label)),
                                               c`substitution)]))
         AND size(cdr[AUT](c`unsolved)) < size(c`unsolved);

% Subtype TCC generated (at line 445, column 9) for
    % c
    %   WITH [unsolved := cdr(c`unsolved),
    %         solved := cons(car(c`unsolved), c`solved)]
    % expected type  {cp: (validConfiguration?) |
                   %    size(cp`unsolved) < size(c`unsolved)}
  % proved - incomplete
Solve_TCC3: OBLIGATION
  FORALL (c: (match_Sol_conf?)):
    NOT AUT_repeated_in?(car(c`unsolved), c`solved) IMPLIES
     validConfiguration?((c
                            WITH [unsolved := cdr[AUT](c`unsolved),
                                  solved
                                    := cons[AUT]
                                           (car[AUT](c`unsolved), c`solved)]))
      AND size(cdr[AUT](c`unsolved)) < size(c`unsolved);

% The SUBTYPE TCC (at line 441, column 28) for
 % term generated from Solve  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Solved_AUT_TCC1

% The SUBTYPE TCC (at line 442, column 24) for
 % term generated from Solve  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Solved_AUT_TCC1

% The SUBTYPE TCC (at line 442, column 58) for
 % term generated from Solve  cons(sol_AUT, c`solved)
    % expected type  (first_AUT_repeated?)
  % is subsumed by nice_sub_Solved_AUT_TCC2

% The SUBTYPE TCC (at line 443, column 33) for
 % term generated from Solve  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Solved_AUT_TCC1

% The SUBTYPE TCC (at line 446, column 36) for
 % term generated from Solve  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Solved_AUT_TCC1

% The SUBTYPE TCC (at line 445, column 33) for
 % term generated from Solve  c`unsolved
    % expected type  (cons?[AUT])
  % is subsumed by nice_sub_Solved_AUT_TCC1

% Subtype TCC generated (at line 467, column 28) for  c
    % expected type  (match_Sol_conf?)
  % proved - incomplete
antiunify_TCC1: OBLIGATION
  FORALL (c: (validConfiguration?)):
    cons?(c`unsolved) AND
     NOT match_DecF_conf?(c) AND
      NOT match_DecP_conf?(c) AND NOT match_Synt_conf?(c)
     IMPLIES match_Sol_conf?(c);

% The TERMINATION TCC (at line 459, column 12) for
 % term generated from antiunify  antiunify(DecF(c))
  % was not generated because it simplifies to TRUE.

% The TERMINATION TCC (at line 462, column 12) for
 % term generated from antiunify  antiunify(DecP(c))
  % was not generated because it simplifies to TRUE.

% The TERMINATION TCC (at line 465, column 12) for
 % term generated from antiunify  antiunify(Synt(c))
  % was not generated because it simplifies to TRUE.

% The TERMINATION TCC (at line 467, column 12) for
 % term generated from antiunify  antiunify(Solve(c))
  % was not generated because it simplifies to TRUE.

% Subtype TCC generated (at line 487, column 54) for  auts
    % expected type  (cons?[AUT])
  % proved - incomplete
build_subs_left_TCC1: OBLIGATION
  FORALL (auts: (valid_AUTs?)):
    NOT null?(auts) IMPLIES
     FORALL (aut: AUT): aut = car(auts) IMPLIES cons?[AUT](auts);

% Subtype TCC generated (at line 487, column 50) for  cdr(auts)
    % expected type  (valid_AUTs?)
  % proved - incomplete
build_subs_left_TCC2: OBLIGATION
  FORALL (auts: (valid_AUTs?)):
    NOT null?(auts) IMPLIES
     FORALL (aut: AUT): aut = car(auts) IMPLIES valid_AUTs?(cdr[AUT](auts));

% Termination TCC generated (at line 487, column 34) for
    % build_subs_left(cdr(auts))
  % proved - incomplete
build_subs_left_TCC3: OBLIGATION
  FORALL (auts: (valid_AUTs?)):
    NOT null?(auts) IMPLIES
     FORALL (aut: AUT):
       aut = car(auts) IMPLIES length[AUT](cdr[AUT](auts)) < length[AUT](auts);

% Subtype TCC generated (at line 486, column 21) for  auts
    % expected type  (cons?[AUT])
  % proved - incomplete
build_subs_left_TCC4: OBLIGATION
  FORALL (auts: (valid_AUTs?)): NOT null?(auts) IMPLIES cons?[AUT](auts);

% The SUBTYPE TCC (at line 504, column 55) for
 % term generated from build_subs_right  auts
    % expected type  (cons?[AUT])
  % is subsumed by build_subs_left_TCC4

% The SUBTYPE TCC (at line 504, column 51) for
 % term generated from build_subs_right  cdr(auts)
    % expected type  (valid_AUTs?)
  % is subsumed by build_subs_left_TCC2

% The TERMINATION TCC (at line 504, column 34) for
 % term generated from build_subs_right
    %  build_subs_right(cdr(auts))
  % is subsumed by build_subs_left_TCC3

% The SUBTYPE TCC (at line 503, column 21) for
 % term generated from build_subs_right  auts
    % expected type  (cons?[AUT])
  % is subsumed by build_subs_left_TCC4

% Subtype TCC generated (at line 590, column 42) for  antiunify(c)`solved
    % expected type  (valid_AUTs?)
  % proved - incomplete
antiunify_solved_substitution_TCC1: OBLIGATION
  FORALL (c: (validConfiguration?), eq: AUT):
    member(eq, c`solved) IMPLIES valid_AUTs?(antiunify(c)`solved);

% The SUBTYPE TCC (at line 591, column 36) for
 % term generated from antiunify_solved_substitution  antiunify(c)`solved
    % expected type  (valid_AUTs?)
  % is subsumed by antiunify_solved_substitution_TCC1

% Subtype TCC generated (at line 603, column 31) for  cf`solved
    % expected type  (valid_AUTs?)
  % proved - incomplete
antiunify_is_sound_TCC1: OBLIGATION
  FORALL (ci: (validConfiguration?), cf: (validConfiguration?),
          sigma: (nice?)):
    cf = antiunify(ci) AND sigma = cf`substitution IMPLIES
     valid_AUTs?(cf`solved);

% Subtype TCC generated (at line 605, column 19) for  ci`unsolved
    % expected type  (valid_AUTs?)
  % proved - incomplete
antiunify_is_sound_TCC2: OBLIGATION
  FORALL (ci: (validConfiguration?), cf: (validConfiguration?), sigma: (nice?),
          rho_l: sub, rho_r: sub):
    cf = antiunify(ci) AND
     sigma = cf`substitution AND
      rho_l = build_subs_left(cf`solved) AND
       rho_r = build_subs_right(cf`solved)
     IMPLIES valid_AUTs?(ci`unsolved);

% Subtype TCC generated (at line 605, column 39) for  rho_l
    % expected type  (nice?)
  % proved - incomplete
antiunify_is_sound_TCC3: OBLIGATION
  FORALL (ci: (validConfiguration?), cf: (validConfiguration?), sigma: (nice?),
          rho_l: sub, rho_r: sub):
    cf = antiunify(ci) AND
     sigma = cf`substitution AND
      rho_l = build_subs_left(cf`solved) AND
       rho_r = build_subs_right(cf`solved)
     IMPLIES nice?(rho_l);

% Subtype TCC generated (at line 605, column 46) for  rho_r
    % expected type  (nice?)
  % proved - incomplete
antiunify_is_sound_TCC4: OBLIGATION
  FORALL (ci: (validConfiguration?), cf: (validConfiguration?), sigma: (nice?),
          rho_l: sub, rho_r: sub):
    cf = antiunify(ci) AND
     sigma = cf`substitution AND
      rho_l = build_subs_left(cf`solved) AND
       rho_r = build_subs_right(cf`solved)
     IMPLIES nice?(rho_r);

% The SUBTYPE TCC (at line 604, column 32) for
 % term generated from antiunify_is_sound  cf`solved
    % expected type  (valid_AUTs?)
  % is subsumed by antiunify_is_sound_TCC1
